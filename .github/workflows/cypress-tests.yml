name: Run Cypress Tests

on:
  workflow_call:
    inputs:
      ENV:
        required: false
        default: 'dev'
        type: string
      EC2_INSTANCE_TYPE:
        default: 'c5a.large'
        required: false
        type: string
      CYPRESS_DIR:
        default: 'cypress'
        required: false
        type: string
      APP_DIR:
        default: '.'
        required: false
        type: string

    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      GH_RUNNER_TOKEN:
        required: true

      CYPRESS_RECORD_KEY:
        required: true

      AWS_REGION:
        required: true
      AWS_IAM_ROLE:
        required: false
      EC2_IMAGE:
        required: true
      EC2_SUBNET:
        required: true
      EC2_SECURITY_GROUP:
        required: true
      EC2_IAM_ROLE:
        required: true
      S3_BUCKET:
        required: true
      AWS_KEYPAIR:
        required: false

jobs:
  start-runner:
    name: Runner
    uses: globalopsteam/workflows/.github/workflows/start-runner.yml@master
    if: always()
    with:
      EC2_INSTANCE_TYPE: ${{ inputs.EC2_INSTANCE_TYPE }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_RUNNER_TOKEN: ${{ secrets.GH_RUNNER_TOKEN }}

      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_IAM_ROLE: ${{ secrets.AWS_IAM_ROLE }}
      EC2_IMAGE: ${{ secrets.EC2_IMAGE }}
      EC2_SUBNET: ${{ secrets.EC2_SUBNET }}
      EC2_SECURITY_GROUP: ${{ secrets.EC2_SECURITY_GROUP }}
      EC2_IAM_ROLE: ${{ secrets.EC2_IAM_ROLE }}
      AWS_KEYPAIR: ${{ secrets.AWS_KEYPAIR }}

  cypress-setup:
    name: Setup
    needs:
      - start-runner
    runs-on: ${{ needs.start-runner.outputs.ec2-instance-id }}
    steps:
      - name: Fetch docker image
        run: |
          docker pull "cypress/included:10.11.0"

      - name: Set S3 suffix
        id: s3_suffix
        env:
          REPO: "${{ github.repository }}"
        run: |
          echo repo=$(basename "${REPO}" | sed 's/^docker-//') >> "${GITHUB_OUTPUT}"

      - name: Fetch cypress environment json
        env:
          ENV: "${{ inputs.ENV }}"
          REPO: "${{ steps.s3_suffix.outputs.repo }}"
          S3_BUCKET: "${{ secrets.S3_BUCKET }}"

        run: |
          aws s3 cp "s3://${S3_BUCKET}/${ENV}/${REPO}/cypress.env.json" "cypress.env.json"

      - name: Upload env file
        uses: actions/upload-artifact@v3
        with:
          name: cypress_env
          path: "cypress.env.json"
          retention-days: 1

      - name: Cleanup
        run: |
          rm -f "cypress.env.json"

  cypress-run:
    name: Run
    needs:
      - start-runner
      - cypress-setup
    if: always() && cancelled() == false
    runs-on: ${{ needs.start-runner.outputs.ec2-instance-id }}
    container:
      image: cypress/included:10.11.0
      env:
        HOME: '/tmp/github'
        CYPRESS_CACHE_FOLDER: '/tmp/github/.cache/Cypress'
      options: '--user 1001 --shm-size=2g'
    strategy:
      fail-fast: false
      matrix:
        browser: ['chrome', 'firefox', 'edge', 'electron']
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          ref: ${{ github.event_name != 'schedule' && github.ref || inputs.ENV == 'prod' && 'refs/heads/production' || 'refs/heads/dev' }}
          token: ${{ secrets.GH_RUNNER_TOKEN }}

      - name: Configure Environment
        id: env_setup
        env:
          APP_DIR: "${{ inputs.APP_DIR }}"
          CYPRESS_DIR: "${{ inputs.CYPRESS_DIR }}"
          ENV: "${{ inputs.env }}"
          EVENT_NAME: "${{ github.event_name }}"
          BROWSER: "${{ matrix.browser }}"
          REPO: "${{ github.repository }}"
        run: |
          mkdir -p '/tmp/github'
          cp -a '/root/.cache' '/tmp/github/.cache'
          echo branch=$(git -C "${APP_DIR}" rev-parse --abbrev-ref HEAD) >> "${GITHUB_OUTPUT}"
          echo subject=$([ "${EVENT_NAME}" = "schedule" ] && echo -n "Scheduled Tests $(date -u +%Y-%m-%d)_$(($(date -u +%H) / 6 + 1))" || echo "${ENV}") "(${BROWSER}):" $(git -C "${APP_DIR}" log -n1 --format="%s") >> "${GITHUB_OUTPUT}"
          git -C "${APP_DIR}" log -n1 --format="author=%an%nemail=%ae%nhash=%H%ntime=%ct" >> "${GITHUB_OUTPUT}"
          echo remote=$(git -C "${APP_DIR}" config --get remote.origin.url) >> "${GITHUB_OUTPUT}"
          rm -f "${CYPRESS_DIR}/cypress.env.json"

      - name: Download env file
        uses: actions/download-artifact@v3
        with:
          name: cypress_env
          path: "${{ inputs.CYPRESS_DIR }}"

      - name: Cypress Run
        uses: cypress-io/github-action@v4
        with:
          browser: ${{ matrix.browser }}
          record: true
          working-directory: ${{ inputs.CYPRESS_DIR }}
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_INFO_BRANCH: ${{ steps.env_setup.outputs.branch != 'HEAD' && steps.env_setup.outputs.branch || inputs.ENV == 'prod' && 'production' || inputs.ENV == 'stage' && 'master' || inputs.env == 'dev' && 'dev' || github.ref_name }}
          COMMIT_INFO_MESSAGE: ${{ steps.env_setup.outputs.subject }}
          COMMIT_INFO_AUTHOR: ${{ steps.env_setup.outputs.author }}
          COMMIT_INFO_EMAIL: ${{ steps.env_setup.outputs.email }}
          COMMIT_INFO_SHA: ${{ steps.env_setup.outputs.hash }}
          COMMIT_INFO_TIMESTAMP: ${{ steps.env_setup.outputs.time }}
          COMMIT_INFO_REMOTE: ${{ steps.env_setup.outputs.remote }}

  stop-runner:
    name: Runner
    needs:
      - start-runner     # required to get output from the start-runner job
      - cypress-setup
      - cypress-run
    if: always() && needs.start-runner.outputs.ec2-instance-id != '' # required to stop the runner even if the error happened in the previous jobs
    uses: globalopsteam/workflows/.github/workflows/stop-runner.yml@master
    with:
      EC2_INSTANCE_ID: ${{ needs.start-runner.outputs.ec2-instance-id }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_IAM_ROLE: ${{ secrets.AWS_IAM_ROLE }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_RUNNER_TOKEN: ${{ secrets.GH_RUNNER_TOKEN }}
