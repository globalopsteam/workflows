name: Build docker image, push to AWS ECR, and deploy code

on:
  workflow_call:
    inputs:
      ENV:
        required: false
        default: 'dev'
        type: string
      ECR_REPOSITORY:
        required: true
        type: string
      DEPLOY_EC2_INSTANCE:
        default: ''
        required: false
        type: string
      DEPLOY_TAR_FILES_EXTRA:
        default: ''
        required: false
        type: string
      EC2_INSTANCE_TYPE:
        default: 't3a.micro'
        required: false
        type: string

    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      GH_RUNNER_TOKEN:
        required: true

      AWS_REGION:
        required: true
      EC2_IMAGE:
        required: true
      EC2_SUBNET:
        required: true
      EC2_SECURITY_GROUP:
        required: true
      EC2_IAM_ROLE:
        required: true

jobs:
  start-runner:
    name: Start runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_RUNNER_TOKEN }}
          ec2-image-id: ${{ secrets.EC2_IMAGE }}
          ec2-instance-type: ${{ inputs.EC2_INSTANCE_TYPE }}
          subnet-id: ${{ secrets.EC2_SUBNET }}
          security-group-id: ${{ secrets.EC2_SECURITY_GROUP }}
          iam-role-name: ${{ secrets.EC2_IAM_ROLE }}

  build-push:
    name: Build + Push
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs.label }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Check if image exists in Amazon ECR
      id: check-ecr
      env:
        ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker manifest inspect $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG > /dev/null && echo "::set-output name=exists::true" || echo "::set-output name=exists::false"
        echo "::set-output name=tag::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "::set-output name=latest::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      if: inputs.DEPLOY_EC2_INSTANCE == '' || steps.check-ecr.outputs.exists == 'false'
      env:
        IMAGE_FULL_TAG: ${{ steps.check-ecr.outputs.tag }}
        IMAGE_FULL_LATEST: ${{ steps.check-ecr.outputs.latest }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t "$IMAGE_FULL_TAG" .
        docker push "$IMAGE_FULL_TAG"
        docker tag "$IMAGE_FULL_TAG" "$IMAGE_FULL_LATEST"
        docker push "$IMAGE_FULL_LATEST"
        echo "::set-output name=image::$IMAGE_FULL_TAG"

    - name: Prepare for deployment
      env:
        IMAGE_FULL_TAG: ${{ steps.check-ecr.outputs.tag }}
        IMAGE_FULL_LATEST: ${{ steps.check-ecr.outputs.latest }}
        ENV: ${{ inputs.ENV }}
        DEPLOYMENT_S3: "s3://globalops-deployment-metadata/${{ inputs.ENV }}/${{ inputs.ECR_REPOSITORY }}.json"
      run: |
        echo "Creating environment file for docker-compose" >&2
        echo "IMAGE_FULL_TAG=${IMAGE_FULL_TAG}" >> ".env"
        echo "IMAGE_FULL_LATEST=${IMAGE_FULL_LATEST}" >> ".env"
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> ".env"
        echo "ENV=${ENV}" >> ".env"

        echo "Creating archive for deployment" >&2
        tar -c ".env" "docker-compose.yml" ${{ inputs.DEPLOY_TAR_FILES_EXTRA }} | gzip -9 > ".archive.tgz"

        echo "Preparing deployment JSON"
        echo -n '{"archive":"' > ".deployment.json"
        base64 -w 0 >> ".deployment.json" < ".archive.tgz"
        echo '"}' >> ".deployment.json"

        echo "Updating deployment JSON: ${DEPLOYMENT_S3}" >&2
        aws s3 cp ".deployment.json" "${DEPLOYMENT_S3}" || true # ignore failure for now
        echo "Deployment metadata: $(cat .deployment.json)" # temp until we get s3 working


  deploy:
    name: Deploy
    needs:
      - start-runner
      - build-push
    runs-on: ${{ needs.start-runner.outputs.label }}
    steps:
    - name: Get EC2 instance IP address
      if: inputs.DEPLOY_EC2_INSTANCE != ''
      id: get-ec2-ip
      run: |
        echo "::set-output name=ec2_ip::$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PrivateIpAddress" --filter "Name=tag:Name,Values=${{ inputs.DEPLOY_EC2_INSTANCE }}" --region "${{ secrets.AWS_REGION }}" --output=text)"

    - name: Deploy code to EC2 instance
      if: inputs.ENV == 'dev' && inputs.DEPLOY_EC2_INSTANCE != '' && steps.get-ec2-ip.outputs.ec2_ip != ''
      env:
        SSH_HOST: ${{ steps.get-ec2-ip.outputs.ec2_ip }}
      run: |
        echo "Testing SSH connection" >&2
        RUN=0; while [[ "${RUN}" -lt "10" ]]; do ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no "ubuntu@${SSH_HOST}" "test" && break || { echo "Waiting 30 seconds to try SSH connection again" >&2; sleep 30; }; RUN=$((RUN + 1)); done; [[ "${RUN}" -ge "10" ]] && exit 255

        echo "Deploying Code" >&2
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no "ubuntu@${SSH_HOST}" "${{ inputs.ECR_REPOSITORY }}" < ".archive.tgz"

  stop-runner:
    name: Stop runner
    needs:
      - start-runner # required to get output from the start-runner job
      - build-push   # required to wait when the main job is done
      - deploy
    runs-on: ubuntu-latest
    if: always() # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_RUNNER_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
